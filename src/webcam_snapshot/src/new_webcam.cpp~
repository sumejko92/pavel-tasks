#include <ros/ros.h>
#include <image_transport/image_transport.h>
#include <opencv2/highgui/highgui.hpp>
#include <cv_bridge/cv_bridge.h>
#include <std_srvs/Empty.h>

sensor_msgs::Image img_;
static const std::string OPENCV_WINDOW = "Image window";

void imageCallback(const sensor_msgs::ImageConstPtr& msg)
{
  img_ = *msg;
}

bool take(std_srvs::Empty::Request &req, std_srvs::Empty::Response &res) 
{
  ROS_INFO("Service called!");

  try
  {
    cv::imshow(OPENCV_WINDOW, cv_bridge::toCvShare(img_, "bgr8")->image);
    cv::waitKey(30);
  }
  catch (cv_bridge::Exception& e)
  {
    ROS_ERROR("Could not convert from '%s' to 'bgr8'.", img_->encoding.c_str());
  }
  return true;
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "image_listener");
  ros::NodeHandle nh;
//  cv::namedWindow("view");
  cv::startWindowThread();
  image_transport::ImageTransport it(nh);
  image_transport::Subscriber sub = it.subscribe("/usb_cam/image_raw", 1, imageCallback);
  ros::ServiceServer service_snapshot = nh.advertiseService("/take_snapshot", take);
  ros::spin();
  cv::destroyWindow("Image window");
}
